@page "/avatars"
@inject IAvatarService AvatarService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Avatars - Avatar Manager</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="bi bi-person-circle"></i> Avatar Management</h2>
                <a href="/avatars/create" class="btn btn-success">
                    <i class="bi bi-plus-circle"></i> Create New Avatar
                </a>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <input @bind="searchTerm"
                   placeholder="Search avatars..."
                   class="form-control" />
        </div>
        <div class="col-md-3">
            <select @bind="selectedCategory" class="form-control">
                <option value="">All Categories</option>
                @foreach (var category in categories)
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <button @onclick="SearchAvatars" class="btn btn-primary">
                <i class="bi bi-search"></i> Search
            </button>
            <button @onclick="ClearSearch" class="btn btn-secondary ms-2">
                <i class="bi bi-x-circle"></i> Clear
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading avatars...</p>
        </div>
    }
    else if (avatars?.Any() == true)
    {
        <div class="row">
            <div class="col-12">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Category</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var avatar in avatars)
                            {
                                <tr>
                                    <td>@avatar.Id</td>
                                    <td>@avatar.Name</td>
                                    <td>@avatar.Category</td>
                                    <td>
                                        <span class="badge @(avatar.IsActive ? "bg-success" : "bg-secondary")">
                                            @(avatar.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </td>
                                    <td>@avatar.CreatedAt.ToString("MM/dd/yyyy")</td>
                                    <td>
                                        <button @onclick="@(() => ViewAvatar(avatar.Id))"
                                                class="btn btn-info btn-sm">
                                            <i class="bi bi-eye"></i> View
                                        </button>
                                        <button @onclick="@(() => EditAvatar(avatar.Id))"
                                                class="btn btn-primary btn-sm ms-1">
                                            <i class="bi bi-pencil"></i> Edit
                                        </button>
                                        <button @onclick="@(() => DeleteAvatar(avatar.Id))"
                                                class="btn btn-danger btn-sm ms-1">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <h5><i class="bi bi-info-circle"></i> No Avatars Found</h5>
            <p>No avatars match your search criteria. <a href="/avatars/create">Create a new avatar</a> to get started.</p>
            <p><strong>Debug:</strong> Avatar count: @avatars.Count</p>
        </div>
    }
</div>

@code {
    private List<AvatarDto> avatars = new();
    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private bool isLoading = true;
    
    private List<string> categories = new() 
    { 
        "Human", "Animal", "Fantasy", "Robot", "Cartoon", "Abstract", "Other" 
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAvatars();
    }

    private async Task LoadAvatars()
    {
        isLoading = true;
        try
        {
            Console.WriteLine("Loading avatars...");
            var allAvatars = await AvatarService.GetAllAsync();
            avatars = allAvatars.ToList();
            Console.WriteLine($"Loaded {avatars.Count} avatars");
        }
        catch (Exception ex)
        {
            // Store error message instead of showing alert during initialization
            Console.WriteLine($"Error loading avatars: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchAvatars()
    {
        isLoading = true;
        try
        {
            IEnumerable<AvatarDto> result;
            
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                result = await AvatarService.SearchByNameAsync(searchTerm);
            }
            else if (!string.IsNullOrWhiteSpace(selectedCategory))
            {
                result = await AvatarService.GetByCategoryAsync(selectedCategory);
            }
            else
            {
                result = await AvatarService.GetAllAsync();
            }
            
            avatars = result.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching avatars: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ClearSearch()
    {
        searchTerm = string.Empty;
        selectedCategory = string.Empty;
        await LoadAvatars();
    }

    private void ViewAvatar(int id)
    {
        NavigationManager.NavigateTo($"/avatars/{id}");
    }

    private void EditAvatar(int id)
    {
        NavigationManager.NavigateTo($"/avatars/edit/{id}");
    }

    private async Task DeleteAvatar(int id)
    {
        try
        {
            var avatar = avatars.FirstOrDefault(a => a.Id == id);
            var avatarName = avatar?.Name ?? $"Avatar {id}";

            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Are you sure you want to delete '{avatarName}'? This action cannot be undone.");

            if (confirmed)
            {
                await AvatarService.DeleteAsync(id);
                await LoadAvatars(); // Reload the list
                await JSRuntime.InvokeVoidAsync("alert", "Avatar deleted successfully!");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting avatar: {ex.Message}");
        }
    }
}
