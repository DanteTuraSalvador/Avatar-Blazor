@page "/team-members"
@rendermode InteractiveServer
@using Avatar.Web.Services

<PageTitle>Team Members - Skills Manager</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="bi bi-people-fill"></i> Team Members Management</h2>
                <button class="btn btn-success" @onclick="ShowAddForm">
                    <i class="bi bi-plus-circle"></i> Add New Team Member
                </button>
            </div>

            @if (showAddForm)
            {
                <div class="card mb-4">
                    <div class="card-header bg-success text-white">
                        <h5><i class="bi bi-plus-circle"></i> @(editingMember != null ? "Edit Team Member" : "Add New Team Member")</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">First Name *</label>
                                    <input type="text" class="form-control" @bind="newFirstName" placeholder="Enter first name" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Email *</label>
                                    <input type="email" class="form-control" @bind="newEmail" placeholder="Enter email address" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Last Name *</label>
                                    <input type="text" class="form-control" @bind="newLastName" placeholder="Enter last name" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Position</label>
                                    <input type="text" class="form-control" @bind="newPosition" placeholder="Enter position" />
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Department</label>
                            <select class="form-select" @bind="newDepartment">
                                <option value="">Select Department</option>
                                <option value="Technology">Technology</option>
                                <option value="Legal">Legal</option>
                                <option value="Finance">Finance</option>
                                <option value="HR">Human Resources</option>
                                <option value="Marketing">Marketing</option>
                            </select>
                        </div>
                        @if (!string.IsNullOrEmpty(validationError))
                        {
                            <div class="alert alert-danger">@validationError</div>
                        }
                        <div class="d-flex gap-2">
                            <button class="btn btn-success" @onclick="SaveMember" disabled="@(!IsFormValid())">
                                <i class="bi bi-check"></i> @(editingMember != null ? "Update Member" : "Add Member")
                            </button>
                            <button class="btn btn-secondary" @onclick="CancelAdd">
                                <i class="bi bi-x"></i> Cancel
                            </button>
                        </div>
                    </div>
                </div>
            }

            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-list"></i> Team Members (@teamMembers.Count members)</h5>
                </div>
                <div class="card-body">
                    @if (teamMembers.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Position</th>
                                        <th>Department</th>
                                        <th>Skills</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var member in teamMembers)
                                    {
                                        <tr>
                                            <td><strong>@member.FullName</strong></td>
                                            <td>@member.Email</td>
                                            <td>@member.Position</td>
                                            <td>@member.Department</td>
                                            <td><span class="badge bg-info">@member.SkillCount skills</span></td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewMember(member)">
                                                        <i class="bi bi-eye"></i> View
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-warning" @onclick="() => EditMember(member)">
                                                        <i class="bi bi-pencil"></i> Edit
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(member)">
                                                        <i class="bi bi-trash"></i> Delete
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-info" @onclick="() => ManageSkills(member)">
                                                        <i class="bi bi-diagram-3"></i> Skills
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info text-center">
                            <i class="bi bi-info-circle"></i>
                            <h5>No Team Members Found</h5>
                            <p>No team members have been added yet.</p>
                            <button class="btn btn-primary" @onclick="ShowAddForm">
                                <i class="bi bi-plus-circle"></i> Add First Team Member
                            </button>
                        </div>
                    }
                </div>
            </div>

            <!-- Delete Confirmation Modal -->
            @if (memberToDelete != null)
            {
                <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Confirm Delete</h5>
                                <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure you want to delete "<strong>@memberToDelete.FullName</strong>"?</p>
                                @if (memberToDelete.SkillCount > 0)
                                {
                                    <div class="alert alert-warning">
                                        <i class="bi bi-exclamation-triangle"></i>
                                        This team member has @memberToDelete.SkillCount skill(s) assigned. Deleting will remove these assignments.
                                    </div>
                                }
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                                <button type="button" class="btn btn-danger" @onclick="DeleteMember">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert alert-success mt-3">
                    <i class="bi bi-check-circle"></i> @message
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool showAddForm = false;
    private string newFirstName = "";
    private string newLastName = "";
    private string newEmail = "";
    private string newPosition = "";
    private string newDepartment = "";
    private string validationError = "";
    private string message = "";
    private TeamMemberItem? editingMember = null;
    private TeamMemberItem? memberToDelete = null;

    private List<TeamMemberItem> teamMembers = new();

    protected override async Task OnInitializedAsync()
    {
        // Load team members from shared data service
        teamMembers = SharedDataService.TeamMembers.ToList();
        await Task.CompletedTask;
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(newFirstName) &&
               !string.IsNullOrWhiteSpace(newLastName) &&
               !string.IsNullOrWhiteSpace(newEmail);
    }

    private void ShowAddForm()
    {
        showAddForm = true;
        editingMember = null;
        ClearForm();
        message = "";
    }

    private void CancelAdd()
    {
        showAddForm = false;
        editingMember = null;
        ClearForm();
        validationError = "";
    }

    private void ClearForm()
    {
        newFirstName = "";
        newLastName = "";
        newEmail = "";
        newPosition = "";
        newDepartment = "";
    }

    private void SaveMember()
    {
        if (!IsFormValid())
            return;

        // Business rule: Check for duplicate email
        if (editingMember == null && teamMembers.Any(m => m.Email.Equals(newEmail, StringComparison.OrdinalIgnoreCase)))
        {
            validationError = $"A team member with email '{newEmail}' already exists. Email addresses must be unique.";
            return;
        }

        if (editingMember != null)
        {
            // Update existing member
            editingMember.FirstName = newFirstName;
            editingMember.LastName = newLastName;
            editingMember.Email = newEmail;
            editingMember.Position = newPosition;
            editingMember.Department = newDepartment;

            // Update in shared data service
            SharedDataService.UpdateTeamMember(editingMember);

            message = $"Team member '{editingMember.FullName}' updated successfully!";
        }
        else
        {
            // Add new member
            var newId = SharedDataService.TeamMembers.Any() ? SharedDataService.TeamMembers.Max(m => m.Id) + 1 : 1;
            var newMember = new TeamMemberItem
            {
                Id = newId,
                FirstName = newFirstName,
                LastName = newLastName,
                Email = newEmail,
                Position = newPosition ?? "Not specified",
                Department = newDepartment ?? "Not specified",
                SkillCount = 0
            };

            // Add to shared data service and local list
            SharedDataService.AddTeamMember(newMember);
            teamMembers.Add(newMember);

            message = $"Team member '{newFirstName} {newLastName}' added successfully!";
        }

        CancelAdd();
    }

    private void ViewMember(TeamMemberItem member)
    {
        message = $"Viewing profile for: {member.FullName}";
    }

    private void EditMember(TeamMemberItem member)
    {
        editingMember = member;
        newFirstName = member.FirstName;
        newLastName = member.LastName;
        newEmail = member.Email;
        newPosition = member.Position;
        newDepartment = member.Department;
        showAddForm = true;
        validationError = "";
        message = "";
    }

    private void ConfirmDelete(TeamMemberItem member)
    {
        memberToDelete = member;
    }

    private void CancelDelete()
    {
        memberToDelete = null;
    }

    private void DeleteMember()
    {
        if (memberToDelete != null)
        {
            // Remove from shared data service and local list
            SharedDataService.RemoveTeamMember(memberToDelete);
            teamMembers.Remove(memberToDelete);

            message = $"Team member '{memberToDelete.FullName}' deleted successfully!";
            memberToDelete = null;
        }
    }

    private void ManageSkills(TeamMemberItem member)
    {
        message = $"Managing skills for: {member.FullName}";
    }

}
