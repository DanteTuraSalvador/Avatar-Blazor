@page "/avatars/create"
@inject IAvatarService AvatarService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Create Avatar - Avatar Manager</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header">
                    <h3><i class="bi bi-plus-circle"></i> Create New Avatar</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@createAvatarDto" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="name" class="form-label">Name *</label>
                                    <InputText @bind-Value="@createAvatarDto.Name"
                                               id="name"
                                               class="form-control"
                                               placeholder="Enter avatar name" />
                                    <ValidationMessage For="@(() => createAvatarDto.Name)" class="text-danger" />
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="category" class="form-label">Category</label>
                                    <InputSelect @bind-Value="@createAvatarDto.Category"
                                                 id="category"
                                                 class="form-control">
                                        <option value="">Select a category</option>
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category">@category</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => createAvatarDto.Category)" class="text-danger" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="imageUrl" class="form-label">Image URL *</label>
                            <div class="input-group">
                                <InputText @bind-Value="@createAvatarDto.ImageUrl"
                                           id="imageUrl"
                                           class="form-control"
                                           placeholder="Enter image URL or click browse" />
                                <button type="button"
                                        class="btn btn-outline-secondary"
                                        @onclick="OpenImagePicker">
                                    <i class="bi bi-images"></i> Browse
                                </button>
                            </div>
                            <ValidationMessage For="@(() => createAvatarDto.ImageUrl)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea @bind-Value="@createAvatarDto.Description"
                                           id="description"
                                           class="form-control"
                                           rows="3"
                                           placeholder="Enter avatar description" />
                            <ValidationMessage For="@(() => createAvatarDto.Description)" class="text-danger" />
                        </div>

                        @if (!string.IsNullOrWhiteSpace(createAvatarDto.ImageUrl))
                        {
                            <div class="mb-3">
                                <label class="form-label">Preview</label>
                                <div class="text-center border rounded p-3">
                                    <img src="@createAvatarDto.ImageUrl"
                                         alt="Avatar preview"
                                         class="img-thumbnail"
                                         style="max-width: 200px; max-height: 200px;"
                                         onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
                                    <div style="display: none;" class="text-muted">
                                        <i class="bi bi-exclamation-triangle"></i>
                                        <br />Image could not be loaded
                                    </div>
                                </div>
                            </div>
                        }
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="createdBy" class="form-label">Created By</label>
                                    <InputText @bind-Value="@createAvatarDto.CreatedBy"
                                               id="createdBy"
                                               class="form-control"
                                               placeholder="Enter creator name" />
                                    <ValidationMessage For="@(() => createAvatarDto.CreatedBy)" class="text-danger" />
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="mb-3 form-check">
                                    <InputCheckbox @bind-Value="@createAvatarDto.IsActive"
                                                   id="isActive"
                                                   class="form-check-input" />
                                    <label for="isActive" class="form-check-label">Is Active</label>
                                </div>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrWhiteSpace(createAvatarDto.ImageUrl))
                        {
                            <div class="mb-3">
                                <label class="form-label">Preview</label>
                                <div class="border rounded p-3 text-center">
                                    <img src="@createAvatarDto.ImageUrl" 
                                         alt="Avatar preview" 
                                         class="img-thumbnail" 
                                         style="max-width: 200px; max-height: 200px;"
                                         onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
                                    <div style="display: none;" class="text-muted">
                                        <i class="bi bi-image"></i>
                                        <br />Image could not be loaded
                                    </div>
                                </div>
                            </div>
                        }
                        
                        <ValidationSummary class="text-danger mb-3" />
                        
                        <div class="d-flex justify-content-between">
                            <button type="button" @onclick="Cancel" class="btn btn-secondary">
                                <i class="bi bi-arrow-left"></i> Cancel
                            </button>

                            <button type="submit" class="btn btn-success" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-2">Creating...</span>
                                }
                                else
                                {
                                    <i class="bi bi-check-circle"></i>
                                    <span class="ms-2">Create Avatar</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Image Picker Dialog -->
<ImagePickerDialog IsVisible="@showImagePicker"
                   CurrentImageUrl="@createAvatarDto.ImageUrl"
                   OnImageSelected="@OnImageSelected"
                   OnClosed="@OnImagePickerClosed" />

@code {
    private CreateAvatarDto createAvatarDto = new();
    private bool isSubmitting = false;
    private bool showImagePicker = false;

    private List<string> categories = new()
    {
        "Human", "Animal", "Fantasy", "Robot", "Cartoon", "Abstract", "Other"
    };

    protected override void OnInitialized()
    {
        createAvatarDto.IsActive = true;
        createAvatarDto.CreatedBy = "Current User"; // In a real app, get from authentication
        createAvatarDto.ImageUrl = "https://via.placeholder.com/300x300/7B68EE/FFFFFF?text=New+Avatar"; // Default placeholder
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            var result = await AvatarService.CreateAsync(createAvatarDto);
            await JSRuntime.InvokeVoidAsync("alert", "Avatar created successfully!");
            NavigationManager.NavigateTo("/avatars");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating avatar: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/avatars");
    }

    private void OpenImagePicker()
    {
        showImagePicker = true;
    }

    private Task OnImageSelected(string imageUrl)
    {
        createAvatarDto.ImageUrl = imageUrl;
        showImagePicker = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnImagePickerClosed()
    {
        showImagePicker = false;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
