@page "/skills"
@rendermode InteractiveServer
@using Avatar.Web.Services

<PageTitle>Skills - Skills Manager</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="bi bi-gear-fill"></i> Skills Management - REAL CRUD</h2>
                <button class="btn btn-success" @onclick="ShowAddForm">
                    <i class="bi bi-plus-circle"></i> Add New Skill
                </button>
            </div>
            
            @if (showAddForm)
            {
                <div class="card mb-4">
                    <div class="card-header bg-success text-white">
                        <h5><i class="bi bi-plus-circle"></i> @(editingSkill != null ? "Edit Skill" : "Add New Skill")</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Skill Name *</label>
                                    <input type="text" class="form-control" @bind="newSkillName" placeholder="Enter skill name" />
                                    @if (!string.IsNullOrEmpty(validationError))
                                    {
                                        <div class="text-danger small">@validationError</div>
                                    }
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Category</label>
                                    <select class="form-select" @bind="newSkillCategory">
                                        <option value="">Select Category</option>
                                        <option value="Programming">Programming</option>
                                        <option value="Framework">Framework</option>
                                        <option value="Database">Database</option>
                                        <option value="Cloud">Cloud</option>
                                        <option value="DevOps">DevOps</option>
                                        <option value="Other">Other</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" @bind="newSkillDescription" placeholder="Enter skill description" rows="3"></textarea>
                        </div>
                        <div class="d-flex gap-2">
                            <button class="btn btn-success" @onclick="SaveSkill" disabled="@(string.IsNullOrWhiteSpace(newSkillName))">
                                <i class="bi bi-check"></i> @(editingSkill != null ? "Update Skill" : "Add Skill")
                            </button>
                            <button class="btn btn-secondary" @onclick="CancelAdd">
                                <i class="bi bi-x"></i> Cancel
                            </button>
                        </div>
                    </div>
                </div>
            }

            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-list"></i> Skills List (@skills.Count skills)</h5>
                </div>
                <div class="card-body">
                    @if (skills.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Name</th>
                                        <th>Category</th>
                                        <th>Description</th>
                                        <th>Team Members</th>
                                        <th>Created</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var skill in skills)
                                    {
                                        <tr>
                                            <td><strong>@skill.Name</strong></td>
                                            <td><span class="badge bg-secondary">@skill.Category</span></td>
                                            <td>@skill.Description</td>
                                            <td><span class="badge bg-info">@skill.TeamMemberCount</span></td>
                                            <td>@skill.CreatedAt.ToString("MM/dd/yyyy")</td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewSkill(skill)">
                                                        <i class="bi bi-eye"></i> View
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-warning" @onclick="() => EditSkill(skill)">
                                                        <i class="bi bi-pencil"></i> Edit
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(skill)">
                                                        <i class="bi bi-trash"></i> Delete
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info text-center">
                            <i class="bi bi-info-circle"></i>
                            <h5>No Skills Found</h5>
                            <p>No skills have been created yet.</p>
                            <button class="btn btn-primary" @onclick="ShowAddForm">
                                <i class="bi bi-plus-circle"></i> Create First Skill
                            </button>
                        </div>
                    }
                </div>
            </div>

            <!-- Delete Confirmation Modal -->
            @if (skillToDelete != null)
            {
                <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Confirm Delete</h5>
                                <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure you want to delete the skill "<strong>@skillToDelete.Name</strong>"?</p>
                                @if (skillToDelete.TeamMemberCount > 0)
                                {
                                    <div class="alert alert-warning">
                                        <i class="bi bi-exclamation-triangle"></i>
                                        This skill is assigned to @skillToDelete.TeamMemberCount team member(s). Deleting it will remove these assignments.
                                    </div>
                                }
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                                <button type="button" class="btn btn-danger" @onclick="DeleteSkill">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert alert-success mt-3">
                    <i class="bi bi-check-circle"></i> @message
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<SkillItem> skills = new();
    private bool showAddForm = false;
    private string newSkillName = "";
    private string newSkillDescription = "";
    private string newSkillCategory = "";
    private string validationError = "";
    private SkillItem? skillToDelete = null;
    private SkillItem? editingSkill = null;
    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        LoadSkills();
        await Task.CompletedTask;
    }

    private void LoadSkills()
    {
        // Load skills from shared data service
        skills = SharedDataService.Skills.ToList();
    }

    private void ShowAddForm()
    {
        showAddForm = true;
        editingSkill = null;
        ClearForm();
        message = "";
    }

    private void CancelAdd()
    {
        showAddForm = false;
        editingSkill = null;
        ClearForm();
        validationError = "";
    }

    private void ClearForm()
    {
        newSkillName = "";
        newSkillDescription = "";
        newSkillCategory = "";
    }

    private void SaveSkill()
    {
        if (string.IsNullOrWhiteSpace(newSkillName))
            return;

        // Business rule: Check for duplicate names
        if (editingSkill == null && skills.Any(s => s.Name.Equals(newSkillName, StringComparison.OrdinalIgnoreCase)))
        {
            validationError = $"A skill with the name '{newSkillName}' already exists. Skill names must be unique.";
            return;
        }

        if (editingSkill != null)
        {
            // Update existing skill
            editingSkill.Name = newSkillName;
            editingSkill.Description = newSkillDescription;
            editingSkill.Category = newSkillCategory ?? "Other";

            // Update in shared data service
            SharedDataService.UpdateSkill(editingSkill);

            message = $"Skill '{editingSkill.Name}' updated successfully!";
        }
        else
        {
            // Add new skill
            var newId = SharedDataService.Skills.Any() ? SharedDataService.Skills.Max(s => s.Id) + 1 : 1;
            var newSkill = new SkillItem
            {
                Id = newId,
                Name = newSkillName,
                Description = newSkillDescription ?? "No description provided",
                Category = newSkillCategory ?? "Other",
                TeamMemberCount = 0,
                CreatedAt = DateTime.Today
            };

            // Add to shared data service and local list
            SharedDataService.AddSkill(newSkill);
            skills.Add(newSkill);

            message = $"Skill '{newSkillName}' added successfully!";
        }

        CancelAdd();
    }

    private void ViewSkill(SkillItem skill)
    {
        message = $"Viewing details for skill: {skill.Name} - {skill.Description}";
    }

    private void EditSkill(SkillItem skill)
    {
        editingSkill = skill;
        newSkillName = skill.Name;
        newSkillDescription = skill.Description;
        newSkillCategory = skill.Category;
        showAddForm = true;
        validationError = "";
        message = "";
    }

    private void ConfirmDelete(SkillItem skill)
    {
        skillToDelete = skill;
    }

    private void CancelDelete()
    {
        skillToDelete = null;
    }

    private void DeleteSkill()
    {
        if (skillToDelete != null)
        {
            // Remove from shared data service and local list
            SharedDataService.RemoveSkill(skillToDelete);
            skills.Remove(skillToDelete);

            message = $"Skill '{skillToDelete.Name}' deleted successfully!";
            skillToDelete = null;
        }
    }

}
