@page "/avatars/edit/{id:int}"
@inject IAvatarService AvatarService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Edit Avatar - Avatar Manager</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Loading avatar...</p>
                </div>
            }
            else if (updateAvatarDto == null)
            {
                <div class="alert alert-danger">
                    <h5><i class="bi bi-exclamation-triangle"></i> Avatar Not Found</h5>
                    <p>The avatar with ID @Id was not found.</p>
                    <a href="/avatars" class="btn btn-primary">
                        <i class="bi bi-arrow-left"></i> Back to Avatars
                    </a>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-header">
                        <h3><i class="bi bi-pencil"></i> Edit Avatar</h3>
                    </div>
                    <div class="card-body">
                        <EditForm Model="@updateAvatarDto" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="name" class="form-label">Name *</label>
                                        <InputText @bind-Value="@updateAvatarDto.Name" 
                                                   id="name" 
                                                   class="form-control" 
                                                   placeholder="Enter avatar name" />
                                        <ValidationMessage For="@(() => updateAvatarDto.Name)" class="text-danger" />
                                    </div>
                                </div>
                                
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="category" class="form-label">Category</label>
                                        <InputSelect @bind-Value="@updateAvatarDto.Category" 
                                                     id="category"
                                                     class="form-control">
                                            <option value="">Select a category</option>
                                            @foreach (var category in categories)
                                            {
                                                <option value="@category">@category</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => updateAvatarDto.Category)" class="text-danger" />
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="imageUrl" class="form-label">Image URL *</label>
                                <div class="input-group">
                                    <InputText @bind-Value="@updateAvatarDto.ImageUrl"
                                               id="imageUrl"
                                               class="form-control"
                                               placeholder="Enter image URL or click browse" />
                                    <button type="button"
                                            class="btn btn-outline-secondary"
                                            @onclick="OpenImagePicker">
                                        <i class="bi bi-images"></i> Browse
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => updateAvatarDto.ImageUrl)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea @bind-Value="@updateAvatarDto.Description" 
                                               id="description" 
                                               class="form-control" 
                                               rows="3"
                                               placeholder="Enter avatar description" />
                                <ValidationMessage For="@(() => updateAvatarDto.Description)" class="text-danger" />
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="updatedBy" class="form-label">Updated By</label>
                                        <InputText @bind-Value="@updateAvatarDto.UpdatedBy" 
                                                   id="updatedBy" 
                                                   class="form-control" 
                                                   placeholder="Enter updater name" />
                                        <ValidationMessage For="@(() => updateAvatarDto.UpdatedBy)" class="text-danger" />
                                    </div>
                                </div>
                                
                                <div class="col-md-6">
                                    <div class="mb-3 form-check">
                                        <InputCheckbox @bind-Value="@updateAvatarDto.IsActive" 
                                                       id="isActive" 
                                                       class="form-check-input" />
                                        <label for="isActive" class="form-check-label">Is Active</label>
                                    </div>
                                </div>
                            </div>
                            
                            @if (!string.IsNullOrWhiteSpace(updateAvatarDto.ImageUrl))
                            {
                                <div class="mb-3">
                                    <label class="form-label">Preview</label>
                                    <div class="border rounded p-3 text-center">
                                        <img src="@updateAvatarDto.ImageUrl" 
                                             alt="Avatar preview" 
                                             class="img-thumbnail" 
                                             style="max-width: 200px; max-height: 200px;"
                                             onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
                                        <div style="display: none;" class="text-muted">
                                            <i class="bi bi-image"></i>
                                            <br />Image could not be loaded
                                        </div>
                                    </div>
                                </div>
                            }
                            
                            <ValidationSummary class="text-danger mb-3" />
                            
                            <div class="d-flex justify-content-between">
                                <button type="button" @onclick="Cancel" class="btn btn-secondary">
                                    <i class="bi bi-arrow-left"></i> Cancel
                                </button>
                                
                                <div>
                                    <a href="/avatars/@Id" class="btn btn-info me-2">
                                        <i class="bi bi-eye"></i> View
                                    </a>
                                    <button type="submit" class="btn btn-success" disabled="@isSubmitting">
                                        @if (isSubmitting)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            <span class="ms-2">Updating...</span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-check-circle"></i>
                                            <span class="ms-2">Update Avatar</span>
                                        }
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Image Picker Dialog -->
<ImagePickerDialog IsVisible="@showImagePicker"
                   CurrentImageUrl="@(updateAvatarDto?.ImageUrl)"
                   OnImageSelected="@OnImageSelected"
                   OnClosed="@OnImagePickerClosed" />

@code {
    [Parameter] public int Id { get; set; }
    
    private UpdateAvatarDto? updateAvatarDto;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool showImagePicker = false;
    
    private List<string> categories = new() 
    { 
        "Human", "Animal", "Fantasy", "Robot", "Cartoon", "Abstract", "Other" 
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAvatar();
    }

    private async Task LoadAvatar()
    {
        isLoading = true;
        try
        {
            var avatar = await AvatarService.GetByIdAsync(Id);
            if (avatar != null)
            {
                updateAvatarDto = new UpdateAvatarDto
                {
                    Name = avatar.Name,
                    Description = avatar.Description,
                    ImageUrl = avatar.ImageUrl,
                    Category = avatar.Category,
                    IsActive = avatar.IsActive,
                    UpdatedBy = "Current User" // In a real app, get from authentication
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading avatar: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (updateAvatarDto == null) return;
        
        isSubmitting = true;
        try
        {
            var result = await AvatarService.UpdateAsync(Id, updateAvatarDto);
            await JSRuntime.InvokeVoidAsync("alert", "Avatar updated successfully!");
            NavigationManager.NavigateTo($"/avatars/{Id}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating avatar: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/avatars/{Id}");
    }

    private void OpenImagePicker()
    {
        showImagePicker = true;
    }

    private Task OnImageSelected(string imageUrl)
    {
        if (updateAvatarDto != null)
        {
            updateAvatarDto.ImageUrl = imageUrl;
            showImagePicker = false;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private Task OnImagePickerClosed()
    {
        showImagePicker = false;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
