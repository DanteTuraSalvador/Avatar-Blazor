@page "/projects/create"
@using TaskManager.Core.Entities
@using TaskManager.Core.Interfaces.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Create Project</h3>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="@project" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="name">Name</label>
                <InputText id="name" @bind-Value="project.Name" class="form-control" />
                <ValidationMessage For="@(() => project.Name)" />
            </div>

            <div class="form-group mb-3">
                <label for="description">Description</label>
                <InputTextArea id="description" @bind-Value="project.Description" class="form-control" rows="3" />
                <ValidationMessage For="@(() => project.Description)" />
            </div>

            <div class="form-group mb-3">
                <label for="startDate">Start Date</label>
                <InputDate id="startDate" @bind-Value="project.StartDate" class="form-control" />
                <ValidationMessage For="@(() => project.StartDate)" />
            </div>

            <div class="form-group mb-3">
                <label for="endDate">End Date</label>
                <InputDate id="endDate" @bind-Value="project.EndDate" class="form-control" />
                <ValidationMessage For="@(() => project.EndDate)" />
            </div>

            <div class="form-group mb-3">
                <button type="submit" class="btn btn-primary">Create</button>
                <a href="/projects" class="btn btn-secondary">Cancel</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private Project project = new Project
    {
        StartDate = DateTime.Today,
        EndDate = DateTime.Today.AddMonths(1)
    };

    private async Task HandleValidSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            project.CreatedById = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            await ProjectService.CreateProjectAsync(project);
            NavigationManager.NavigateTo("/projects");
        }
    }
}