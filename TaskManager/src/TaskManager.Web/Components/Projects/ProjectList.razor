@page "/projects"
@using TaskManager.Core.Entities
@using TaskManager.Core.Interfaces.Services
@using Microsoft.JSInterop
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Projects</h3>

<div class="mb-3">
    <a href="/projects/create" class="btn btn-primary">Create New Project</a>
</div>

@if (projects == null)
{
    <p><em>Loading...</em></p>
}
else if (!projects.Any())
{
    <p>No projects found. Create a new project to get started.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var project in projects)
                {
                    <tr>
                        <td>@project.Name</td>
                        <td>@project.Description</td>
                        <td>@project.StartDate.ToShortDateString()</td>
                        <td>@project.EndDate.ToShortDateString()</td>
                        <td>
                            <a href="/projects/@project.Id" class="btn btn-info btn-sm">Details</a>
                            <a href="/projects/edit/@project.Id" class="btn btn-warning btn-sm">Edit</a>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteProject(project.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private IEnumerable<Project> projects;

    protected override async Task OnInitializedAsync()
    {
        projects = await ProjectService.GetAllProjectsAsync();
    }

    private async Task DeleteProject(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this project?"))
        {
            await ProjectService.DeleteProjectAsync(id);
            projects = await ProjectService.GetAllProjectsAsync();
        }
    }
}