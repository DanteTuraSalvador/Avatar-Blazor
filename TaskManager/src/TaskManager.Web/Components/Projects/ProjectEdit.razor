@page "/projects/edit/{Id:int}"
@using TaskManager.Core.Entities
@using TaskManager.Core.Interfaces.Services
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager

<h3>Edit Project</h3>

@if (project == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="@project" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-3">
                    <label for="name">Name</label>
                    <InputText id="name" @bind-Value="project.Name" class="form-control" />
                    <ValidationMessage For="@(() => project.Name)" />
                </div>

                <div class="form-group mb-3">
                    <label for="description">Description</label>
                    <InputTextArea id="description" @bind-Value="project.Description" class="form-control" rows="3" />
                    <ValidationMessage For="@(() => project.Description)" />
                </div>

                <div class="form-group mb-3">
                    <label for="startDate">Start Date</label>
                    <InputDate id="startDate" @bind-Value="project.StartDate" class="form-control" />
                    <ValidationMessage For="@(() => project.StartDate)" />
                </div>

                <div class="form-group mb-3">
                    <label for="endDate">End Date</label>
                    <InputDate id="endDate" @bind-Value="project.EndDate" class="form-control" />
                    <ValidationMessage For="@(() => project.EndDate)" />
                </div>

                <div class="form-group mb-3">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <a href="/projects" class="btn btn-secondary">Cancel</a>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Project project;

    protected override async Task OnInitializedAsync()
    {
        project = await ProjectService.GetProjectByIdAsync(Id);
    }

    private async Task HandleValidSubmit()
    {
        await ProjectService.UpdateProjectAsync(project);
        NavigationManager.NavigateTo("/projects");
    }
}