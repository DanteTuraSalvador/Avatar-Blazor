@page "/tasks/create"
@page "/tasks/create/{ProjectId:int}"
@using TaskManager.Core.Entities
@using TaskManager.Core.Interfaces.Services
@using Microsoft.AspNetCore.Components.Authorization
@using TaskStatus = TaskManager.Core.Entities.TaskStatus
@inject ITaskService TaskService
@inject IProjectService ProjectService
@inject ITaskStatusService TaskStatusService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Create Task</h3>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="@task" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="title">Title</label>
                <InputText id="title" @bind-Value="task.Title" class="form-control" />
                <ValidationMessage For="@(() => task.Title)" />
            </div>

            <div class="form-group mb-3">
                <label for="description">Description</label>
                <InputTextArea id="description" @bind-Value="task.Description" class="form-control" rows="3" />
                <ValidationMessage For="@(() => task.Description)" />
            </div>

            <div class="form-group mb-3">
                <label for="projectId">Project</label>
                <InputSelect id="projectId" @bind-Value="task.ProjectId" class="form-control">
                    @if (projects != null)
                    {
                        @foreach (var project in projects)
                        {
                            <option value="@project.Id">@project.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => task.ProjectId)" />
            </div>

            <div class="form-group mb-3">
                <label for="statusId">Status</label>
                <InputSelect id="statusId" @bind-Value="task.StatusId" class="form-control">
                    @if (statuses != null)
                    {
                        @foreach (var status in statuses)
                        {
                            <option value="@status.Id">@status.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => task.StatusId)" />
            </div>

            <div class="form-group mb-3">
                <label for="dueDate">Due Date</label>
                <InputDate id="dueDate" @bind-Value="task.DueDate" class="form-control" />
                <ValidationMessage For="@(() => task.DueDate)" />
            </div>

            <div class="form-group mb-3">
                <label for="priority">Priority (1-5)</label>
                <InputNumber id="priority" @bind-Value="task.Priority" class="form-control" min="1" max="5" />
                <ValidationMessage For="@(() => task.Priority)" />
            </div>

            <div class="form-group mb-3">
                <button type="submit" class="btn btn-primary">Create</button>
                <a href="/tasks" class="btn btn-secondary">Cancel</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int? ProjectId { get; set; }

    private TaskItem task = new TaskItem
    {
        DueDate = DateTime.Today.AddDays(7),
        Priority = 3
    };

    private IEnumerable<Project> projects;
    private IEnumerable<TaskStatus> statuses;

    protected override async Task OnInitializedAsync()
    {
        projects = await ProjectService.GetAllProjectsAsync();
        statuses = await TaskStatusService.GetAllStatusesAsync();

        if (ProjectId.HasValue)
        {
            task.ProjectId = ProjectId.Value;
        }
        else if (projects.Any())
        {
            task.ProjectId = projects.First().Id;
        }

        if (statuses.Any())
        {
            // Default to "To Do" status (assuming it has ID 1)
            task.StatusId = statuses.FirstOrDefault(s => s.Name == "To Do")?.Id ?? 1;
        }
    }

    private async Task HandleValidSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            task.CreatedById = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            await TaskService.CreateTaskAsync(task);
            
            if (ProjectId.HasValue)
            {
                NavigationManager.NavigateTo($"/projects/{ProjectId.Value}");
            }
            else
            {
                NavigationManager.NavigateTo("/tasks");
            }
        }
    }
}