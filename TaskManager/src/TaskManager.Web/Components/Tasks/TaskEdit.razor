@page "/tasks/edit/{Id:int}"
@using TaskManager.Core.Entities
@using TaskManager.Core.Interfaces.Services
@using TaskStatus = TaskManager.Core.Entities.TaskStatus
@inject ITaskService TaskService
@inject IProjectService ProjectService
@inject ITaskStatusService TaskStatusService
@inject NavigationManager NavigationManager

<h3>Edit Task</h3>

@if (task == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="@task" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-3">
                    <label for="title">Title</label>
                    <InputText id="title" @bind-Value="task.Title" class="form-control" />
                    <ValidationMessage For="@(() => task.Title)" />
                </div>

                <div class="form-group mb-3">
                    <label for="description">Description</label>
                    <InputTextArea id="description" @bind-Value="task.Description" class="form-control" rows="3" />
                    <ValidationMessage For="@(() => task.Description)" />
                </div>

                <div class="form-group mb-3">
                    <label for="projectId">Project</label>
                    <InputSelect id="projectId" @bind-Value="task.ProjectId" class="form-control">
                        @if (projects != null)
                        {
                            @foreach (var project in projects)
                            {
                                <option value="@project.Id">@project.Name</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => task.ProjectId)" />
                </div>

                <div class="form-group mb-3">
                    <label for="statusId">Status</label>
                    <InputSelect id="statusId" @bind-Value="task.StatusId" class="form-control">
                        @if (statuses != null)
                        {
                            @foreach (var status in statuses)
                            {
                                <option value="@status.Id">@status.Name</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => task.StatusId)" />
                </div>

                <div class="form-group mb-3">
                    <label for="dueDate">Due Date</label>
                    <InputDate id="dueDate" @bind-Value="task.DueDate" class="form-control" />
                    <ValidationMessage For="@(() => task.DueDate)" />
                </div>

                <div class="form-group mb-3">
                    <label for="priority">Priority (1-5)</label>
                    <InputNumber id="priority" @bind-Value="task.Priority" class="form-control" min="1" max="5" />
                    <ValidationMessage For="@(() => task.Priority)" />
                </div>

                <div class="form-group mb-3">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <a href="/tasks" class="btn btn-secondary">Cancel</a>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private TaskItem task;
    private IEnumerable<Project> projects;
    private IEnumerable<TaskStatus> statuses;

    protected override async Task OnInitializedAsync()
    {
        task = await TaskService.GetTaskByIdAsync(Id);
        projects = await ProjectService.GetAllProjectsAsync();
        statuses = await TaskStatusService.GetAllStatusesAsync();
    }

    private async Task HandleValidSubmit()
    {
        await TaskService.UpdateTaskAsync(task);
        NavigationManager.NavigateTo($"/tasks/{Id}");
    }
}