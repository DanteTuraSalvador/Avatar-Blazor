@page "/tasks"
@using TaskManager.Core.Entities
@using TaskManager.Core.Interfaces.Services
@using Microsoft.JSInterop
@using TaskStatus = TaskManager.Core.Entities.TaskStatus
@inject ITaskService TaskService
@inject ITaskStatusService TaskStatusService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Tasks</h3>

<div class="mb-3 d-flex justify-content-between align-items-center">
    <div>
        <a href="/tasks/create" class="btn btn-primary">Create New Task</a>
    </div>
    <div>
        <div class="input-group">
            <select class="form-select" @bind="selectedStatusId">
                <option value="0">All Statuses</option>
                @if (statuses != null)
                {
                    @foreach (var status in statuses)
                    {
                        <option value="@status.Id">@status.Name</option>
                    }
                }
            </select>
            <button class="btn btn-outline-secondary" @onclick="FilterTasks">Filter</button>
        </div>
    </div>
</div>

@if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else if (!tasks.Any())
{
    <p>No tasks found. Create a new task to get started.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Project</th>
                    <th>Status</th>
                    <th>Due Date</th>
                    <th>Priority</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in tasks)
                {
                    <tr>
                        <td>@task.Title</td>
                        <td>@task.Project?.Name</td>
                        <td>
                            <span class="badge" style="background-color: @task.Status?.ColorCode">
                                @task.Status?.Name
                            </span>
                        </td>
                        <td>@task.DueDate.ToShortDateString()</td>
                        <td>@task.Priority</td>
                        <td>
                            <a href="/tasks/@task.Id" class="btn btn-info btn-sm">Details</a>
                            <a href="/tasks/edit/@task.Id" class="btn btn-warning btn-sm">Edit</a>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteTask(task.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private IEnumerable<TaskItem> tasks;
    private IEnumerable<TaskStatus> statuses;
    private int selectedStatusId = 0;

    protected override async Task OnInitializedAsync()
    {
        tasks = await TaskService.GetAllTasksAsync();
        statuses = await TaskStatusService.GetAllStatusesAsync();
    }

    private async Task FilterTasks()
    {
        if (selectedStatusId == 0)
        {
            tasks = await TaskService.GetAllTasksAsync();
        }
        else
        {
            tasks = await TaskService.GetTasksByStatusIdAsync(selectedStatusId);
        }
    }

    private async Task DeleteTask(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task?"))
        {
            await TaskService.DeleteTaskAsync(id);
            tasks = await TaskService.GetAllTasksAsync();
        }
    }
}