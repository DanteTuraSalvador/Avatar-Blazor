@page "/"
@using TaskManager.Core.Entities
@using TaskManager.Core.Interfaces.Services
@using Microsoft.AspNetCore.Components.Authorization
@using TaskStatus = TaskManager.Core.Entities.TaskStatus
@inject IProjectService ProjectService
@inject ITaskService TaskService
@inject ITaskStatusService TaskStatusService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Welcome to Task Manager</h1>
        
        <div class="row mt-4">
            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">My Projects</h5>
                        <a href="/projects" class="btn btn-sm btn-primary">View All</a>
                    </div>
                    <div class="card-body">
                        @if (projects == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else if (!projects.Any())
                        {
                            <p>No projects found. <a href="/projects/create">Create a new project</a> to get started.</p>
                        }
                        else
                        {
                            <div class="list-group">
                                @foreach (var project in projects.Take(5))
                                {
                                    <a href="/projects/@project.Id" class="list-group-item list-group-item-action">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h5 class="mb-1">@project.Name</h5>
                                            <small>Due: @project.EndDate.ToShortDateString()</small>
                                        </div>
                                        <p class="mb-1">@(project.Description?.Length > 100 ? project.Description.Substring(0, 100) + "..." : project.Description)</p>
                                    </a>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">My Tasks</h5>
                        <a href="/tasks" class="btn btn-sm btn-primary">View All</a>
                    </div>
                    <div class="card-body">
                        @if (tasks == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else if (!tasks.Any())
                        {
                            <p>No tasks assigned to you. <a href="/tasks/create">Create a new task</a> to get started.</p>
                        }
                        else
                        {
                            <div class="list-group">
                                @foreach (var task in tasks.Take(5))
                                {
                                    <a href="/tasks/@task.Id" class="list-group-item list-group-item-action">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h5 class="mb-1">@task.Title</h5>
                                            <span class="badge" style="background-color: @task.Status?.ColorCode">
                                                @task.Status?.Name
                                            </span>
                                        </div>
                                        <p class="mb-1">@(task.Description?.Length > 100 ? task.Description.Substring(0, 100) + "..." : task.Description)</p>
                                        <small>Due: @task.DueDate.ToShortDateString() | Project: @task.Project?.Name</small>
                                    </a>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Task Status Overview</h5>
                    </div>
                    <div class="card-body">
                        @if (tasksByStatus == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else
                        {
                            <div class="row">
                                @foreach (var status in tasksByStatus)
                                {
                                    <div class="col-md-4 mb-3">
                                        <div class="card" style="border-color: @status.Key.ColorCode">
                                            <div class="card-header text-white" style="background-color: @status.Key.ColorCode">
                                                @status.Key.Name (@status.Value.Count())
                                            </div>
                                            <div class="card-body">
                                                @if (!status.Value.Any())
                                                {
                                                    <p>No tasks with this status.</p>
                                                }
                                                else
                                                {
                                                    <ul class="list-group list-group-flush">
                                                        @foreach (var task in status.Value.Take(3))
                                                        {
                                                            <li class="list-group-item">
                                                                <a href="/tasks/@task.Id">@task.Title</a>
                                                                <small class="d-block text-muted">Due: @task.DueDate.ToShortDateString()</small>
                                                            </li>
                                                        }
                                                    </ul>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="text-center mt-5">
            <h1 class="display-4">Welcome to Task Manager</h1>
            <p class="lead">A simple and effective way to manage your projects and tasks.</p>
            <hr class="my-4">
            <p>Please log in or register to get started.</p>
            <div class="mt-4">
                <a href="account/register" class="btn btn-primary btn-lg me-3">Register</a>
                <a href="account/login" class="btn btn-outline-primary btn-lg">Log in</a>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private IEnumerable<Project> projects;
    private IEnumerable<TaskItem> tasks;
    private Dictionary<TaskStatus, IEnumerable<TaskItem>> tasksByStatus;
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            
            if (!string.IsNullOrEmpty(userId))
            {
                projects = await ProjectService.GetProjectsByUserIdAsync(userId);
                tasks = await TaskService.GetTasksByUserIdAsync(userId);
                
                var statuses = await TaskStatusService.GetAllStatusesAsync();
                var allTasks = await TaskService.GetAllTasksAsync();
                
                tasksByStatus = new Dictionary<TaskStatus, IEnumerable<TaskItem>>();
                
                foreach (var status in statuses)
                {
                    tasksByStatus[status] = allTasks.Where(t => t.StatusId == status.Id);
                }
            }
        }
    }
}
